{%- set ASSET_PACK_HREF = ASSET_PACK_HREF or environ('ASSET_PACK_HREF') -%}
{%- set ASSET_DIR = ASSET_DIR or environ('ASSET_DIR') -%}

window.webAppAssetPackHref = "{{ ASSET_PACK_HREF }}"
window.webAppModsDir = "{{ ASSET_DIR }}mods/"
window.webAppIModsDir = "{{ ASSET_DIR }}archive/imods/"

window.webAppOpinionatedDefaults = {
  showAddressBar: false,
  mspaMode: true,
  ruffleFallback: true,
  useTabbedBrowsing: false,
}

{% set mods = "HomestuckSlurReplacement Plaintext-Images Psycholonials semantic socialLinks homestuckCommentary.js oddities eraserhead.js".split() %}

// use fs: tuhc-readmspa zombocom.js tuhc-puzzlestuck
// violate ES6 strict mode: oddities

window.webAppModJs = {
  'cdn.js': lockmod(require('{{ ASSET_DIR }}mods/cdn.js')),

  _bolin: require('{{ ASSET_DIR }}archive/imods/_bolin.js'),
  _hqAudio: require('{{ ASSET_DIR }}archive/imods/_hqAudio.js'),
  _pxsTavros: require('{{ ASSET_DIR }}archive/imods/_pxsTavros.js'),
  _replaybound: require('{{ ASSET_DIR }}archive/imods/_replaybound/mod.js'),
  _secret: require('{{ ASSET_DIR }}archive/imods/_secret/mod.js'),
  _soluslunes: require('{{ ASSET_DIR }}archive/imods/_soluslunes.js'),
  _twoToThree: require('{{ ASSET_DIR }}archive/imods/_twoToThree/mod.js'),
  _unpeachy: require('{{ ASSET_DIR }}archive/imods/_unpeachy.js'),
  {% for mod in mods -%}
  '{{ mod }}': require('{{ ASSET_DIR }}mods/{{ mod if mod.endswith(".js") else mod + "/mod.js" }}'),
  {% endfor %}
}


window.webAppModTrees = require('../webAppModTrees.json')

async function getArchiveData() {
  return {
    // NB webpack require mandates full literal strings here, no paramterization.
    ...(await import('{{ ASSET_DIR }}archive/data/version.json')),
    mspa: await import('{{ ASSET_DIR }}archive/data/mspa.json'),
    social: await import('{{ ASSET_DIR }}archive/data/social.json'),
    news: await import('{{ ASSET_DIR }}archive/data/news.json'),
    music: await import('{{ ASSET_DIR }}archive/data/music.json'),
    comics: await import('{{ ASSET_DIR }}archive/data/comics.json'),
    extras: await import('{{ ASSET_DIR }}archive/data/extras.json'),
    tweaks: await import('{{ ASSET_DIR }}archive/data/tweaks.json'),
    audioData: {},
    flags: {}
  }
}

// End configuration

function lockmod(modjs) { // hoisted
  modjs.hidden = true
  return modjs
}

window.isWebApp = true
const Mods = require("../src/mods.js").default

const logger = console

async function loadArchiveData() {
  // We have to de-module the data into raw json so it's not mutable, otherwise the content doesn't reset on reload.
  let data = JSON.parse(JSON.stringify(await getArchiveData()))

  data.tweaks.tzPasswordPages = Object.values(data.mspa.story)
    .filter(v => v.flag.includes('TZPASSWORD'))
    .map(v => v.pageId)

  logger.debug("Applying mod archive edits")
  Mods.editArchive(data)
  // This isn't strictly part of loading the archive data,
  // but we should do this only when we reload the archive
  logger.debug("Baking mod routes")
  Mods.bakeRoutes()

  // Sanity checks
  const required_keys = ['mspa', 'social', 'news', 'music', 'comics', 'extras']
  required_keys.forEach(key => {
    if (!data[key]) throw new Error("Archive object missing required key", key)
  })

  return data
}

const fakeIpc = require('./fakeIpc.js')

fakeIpc.on('RELOAD_ARCHIVE_DATA', (event) => {
  fakeIpc.send('SET_LOAD_STATE', "LOADING")
  try {
    fakeIpc.send('SET_LOAD_STAGE', "ARCHIVE")
    loadArchiveData().then(data => {
      fakeIpc.send('ARCHIVE_UPDATE', data)
      fakeIpc.send('SET_LOAD_STATE', "DONE")
    })
  } catch (e) {
    fakeIpc.send('SET_LOAD_STATE', "ERROR")
  }
})

require('../src/main')
